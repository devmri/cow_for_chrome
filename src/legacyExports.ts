import React from "react";
import * as ReactDOMClient from "react-dom/client";
import { Button } from "./components/Button";
import { Icon } from "./components/Icon";
import { Input } from "./components/Input";
import { Textarea } from "./components/Textarea";
import { LoadingSpinner } from "./components/LoadingSpinner";
import { LoginCta } from "./components/LoginCta";
import { AppProviders } from "./providers/AppProvider";
import { useCurrentAccount, CurrentAccountProvider } from "./providers/CurrentAccountProvider";
import { useUserProfileQuery } from "./hooks/useUserProfileQuery";
import { SavedPromptsService } from "./lib/savedPrompts";
import {
  permissionService,
  PermissionsManager,
  ToolAction,
  PermissionDuration,
} from "./lib/permissions";
import ScheduledTaskLogsService from "./lib/scheduledTasks";
import { withTelemetrySpan, generateTraceHeaders, initializeTelemetry } from "./lib/telemetry";
import { cn } from "./utils/classNames";
// Statsig removed

const legacyInterop = <T,>(mod: T): T & { default: T } => {
  if (mod && typeof mod === "object" && "default" in mod) return mod as any;
  return Object.assign({}, mod, { default: mod });
};

const descriptors = {
  $: legacyInterop,
  A: "@radix-ui/react-popper:PopperAnchor",
  B: Button,
  C: "@radix-ui/react-popper:PopperContent",
  D: "@radix-ui/react-dismissable-layer:DismissableLayer",
  E: SavedPromptsService,
  F: "lucide-react:ForwardRefIconComponent",
  G: PermissionsManager,
  H: ScheduledTaskLogsService,
  I: Icon,
  J: LoadingSpinner,
  K: initializeTelemetry,
  L: LoginCta,
  M: ReactDOMClient,
  N: React,
  O: AppProviders,
  P: "@radix-ui/react-primitive:Primitive",
  Q: "@radix-ui/react-slot:Slot",
  R: "@radix-ui/react-popper:PopperRoot",
  S: "@opentelemetry/api:SpanStatusCode",
  T: ToolAction,
  U: useUserProfileQuery,
  V: "tslib:__rest",
  W: "tslib:__spreadArray",
  X: "lucide-react:icon[x]",
  Y: "@radix-ui/primitive:eventHandler",
  Z: "@radix-ui/react-compose-refs:composeRefs",
  _: "tslib:__assign",
  a: useCurrentAccount,
  a0: "tslib:__awaiter",
  a1: "tslib:__generator",
  a2: "@opentelemetry/otlp-transformer:helpers",
  a3: "@opentelemetry/otlp-transformer:helpers",
  a4: "@opentelemetry/otlp-transformer:helpers",
  a5: "@opentelemetry/otlp-transformer:helpers",
  a6: "@opentelemetry/otlp-transformer:helpers",
  a7: "@opentelemetry/otlp-transformer:helpers",
  a8: "@opentelemetry/otlp-transformer:helpers",
  a9: "@opentelemetry/otlp-transformer:helpers",
  aa: "@opentelemetry/otlp-transformer:helpers",
  ab: "@opentelemetry/otlp-transformer:helpers",
  ac: "@opentelemetry/api:errorHandling",
  ad: "@opentelemetry/api:traceFlags",
  ae: "statsig-js:RetryingQueue",
  af: "statsig-js:PersistentQueue",
  ag: "statsig-js:StatsigClient",
  ah: "@segment/analytics-core:Middleware",
  ai: "@segment/analytics-core:Context",
  aj: "@segment/analytics-core:EnvUtils",
  ak: "vite:__vitePreload",
  al: "@segment/analytics-core:attempt",
  am: "@segment/analytics-next:createDeferred",
  b: "SentryService bundler helper",
  c: cn,
  d: "@radix-ui/react-context:Scope",
  e: "@radix-ui/react-popper:createPopperScope",
  f: "@radix-ui/react-id:useId",
  g: generateTraceHeaders,
  h: "@radix-ui/react-use-controllable-state:useControllableState",
  i: "@radix-ui/react-compose-refs:useCallbackRef",
  j: "react/jsx-runtime",
  k: "@radix-ui/react-compose-refs:composeRefs",
  l: "@radix-ui/react-presence:Presence",
  m: "@radix-ui/react-portal:Portal",
  n: "@radix-ui/react-slot:SlotPrimitive",
  o: "@radix-ui/react-popper:PopperArrow",
  p: "lucide-react:IconBase",
  q: PermissionDuration,
  r: React,
  s: undefined as any,
  t: "actionVerb",
  u: permissionService,
  v: "lucide-react:createLucideIcon",
  w: withTelemetrySpan,
  x: "lucide-react:createLucideIcon(circle-alert)",
  y: Input,
  z: Textarea,
} as const;

export const {
  $,
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  _,
  a,
  a0,
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  a9,
  aa,
  ab,
  ac,
  ad,
  ae,
  af,
  ag,
  ah,
  ai,
  aj,
  ak,
  al,
  am,
  b,
  c,
  d,
  e,
  f,
  g,
  h,
  i,
  j,
  k,
  l,
  m,
  n,
  o,
  p,
  q,
  r,
  s,
  t,
  u,
  v,
  w,
  x,
  y,
  z,
} = descriptors;

export type LegacyAliasMap = typeof descriptors;
